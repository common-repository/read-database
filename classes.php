<?php/** * Read Database * * * @package WordPress * @subpackage read database * @author Rahul Naik <naikrahulda@gmail.com> */if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directlyclass Read_DB{    /*     * Query to get list of tables in database     */    private $db_q_show   = "SHOW Tables ";    /*     * Query to get all data from table     */    private $db_q_select = "SELECT * FROM ";    /*     * Get global wbdb for our class     */    private $db;    /*     * Valid table list for application     */    private $table_list = array();    /*     * All table list for application     */    private $all_table_list = array();    /*     * Constuctor     *     * @return void     */    public function __construct() {        global $wpdb;        $this->db = $wpdb;        $this->rd_init();    }    /*     * Initializing Read DB     *     * @return void     */    public function rd_init() {        add_action('wp_loaded',  array($this, 'enqueue_scripts') );        add_action('admin_menu', array($this, 'database_directory_management_menu'));        // Let query our database to get list of all tables        $results      = $this->db->get_results($this->db_q_show);        $output       = '';        $table_list   = array();        foreach($results as $result){            foreach($result as $table){                array_push($table_list, $table);            }        }        $this->all_table_list = $table_list;        // Let's remove tables from which are in exclude list        $this->table_list = array_diff($table_list, $this->readXML());    }    /*     * Enqueue all required scripts (js and css)     * @return void     */    public function enqueue_scripts() {      // Include javascript      wp_enqueue_script('tablesorter.js',    plugins_url('js/jquery.tablesorter.min.js', __FILE__));      wp_enqueue_script('read-db-intro.js',  plugins_url('js/intro.min.js'             , __FILE__));      wp_enqueue_script('read-db-script.js', plugins_url('js/script.min.js'            , __FILE__));      // Include Css      wp_enqueue_style ('read-db-style.css', plugins_url('css/style-min.css'           , __FILE__));      wp_enqueue_style ('read-db-intro.css', plugins_url('css/introjs.min.css'         , __FILE__));    }    /*     * Add Read Database Link to Admin Menu bar     *     * @return void     */    public function database_directory_management_menu() {        add_menu_page('Read Database' ,                      'Read Database' ,                      'manage_options',                      'read_database' ,         array($this, 'display_data'  )        );        add_submenu_page('read_database'         ,                         'Settings'              ,                         'Settings'              ,                         'manage_options'        ,                         'read_database_settings',            array($this, 'display_data_settings' )        );    }    /*     * Display Data     *     * Function to get data from datatable     *     * @return void     */    public function display_data() {        // Let's build Dom structure        $output .= '<h1>Read Database</h1>';        $output .= '<div class="">';        $output .= '<form method="post">                     <select id="rd_dropdown" data-intro="Change table name to see content of that table">';        foreach($this->table_list as $table)  {             $output .= "<option value='$table'>$table</option>";        }        $output .= '</select>';        $output .= '<input type="submit" class="button action" name="downloadcsv" data-intro="To download selected table\'s content in CSV format click this button"                    id="downloadcsv" value="Download CSV" />';        $output .= '<input type="submit" class="button action" name="downloadcsv"                    id="get_rd_help" value="Help!" />            </form>';        $output .= "<input type='hidden' id='ajax-path' value='" . admin_url('admin-ajax.php') . "' />";        $output .= "<input type='hidden' id='secure' value='" . wp_create_nonce( "rdSecure" ) . "' />";        $output .= "<span class='rd_msg'></span>";        $output .= '<table id="rd-table" class="display wrapper rd_data tablesorter" data-intro="This is the content of your table" >                        <thead>                            <tr></tr>                        </thead>                        <tfoot>                            <tr></tr>                        </tfoot>                        <tbody>                        </tbody>                    </table>';        $output .= '</div>';        echo $output;    }    /*     * Display Data Settings     *     * Function to create setting page     */    public function display_data_settings(){        $excludeList = $this->readXML();        $results     = $this->db->get_results($this->db_q_show);        $op          = "<h1>Read Database Settings</h1><h2>Exclude below tables</h2>";        $op         .= "<form method='post' action='?page=read_database_settings'>";        $op         .= wp_nonce_field('rd_submit_setting', 'rd_setting_value', true, false);        foreach($results as $result){            foreach($result as $table){                $op  .= "<lable for='rd_chk[]'><input type='checkbox' name='rd_chk[]' value='$table'";                if(in_array($table, $excludeList))                        $op .= 'checked="checked"';                $op .= "/> $table </lable><br/>";            }        }        echo $op .= '<input name="rd_submit" type="submit" value="Submit"></form>';         if(isset($_POST) && isset($_POST['rd_submit']) &&                 current_user_can('administrator') && check_admin_referer('rd_submit_setting', 'rd_setting_value'))         {            if($this->validatetoXML($_POST)) {                $p = sanitize_post($_POST);                $this->editXML($p);            }         }    }    /*     * Read database from ajax     *     * @param string $tablename name of table     * @return json results | bool fasle     */    public function read_db_ajax($tablename) {        if(!$tablename)            return;        //Validating input is wp table name or not        if((strpos($tablename, $this->db->prefix) !== false) &&                (in_array($tablename, $this->table_list))) {            $tablename = $this->secure($tablename);            // Let query our database to get details of table            $results   = $this->db->get_results($this->db_q_select . $tablename);            if(count($results) > 0) {                return json_encode($results);            } else {                return false;            }        } else {            return false;        }    }    /*     * Secure     *     * Make input variable secure to pass in database query     *     * @param string $input     * @return string     */    public function secure($input) {        if(!$input)            return;        $input = esc_html($input);        $input = strip_tags($input);        $input = htmlspecialchars($input);        return sanitize_text_field($input);    }    /*     * Add prefix     *     * Add a string to array values as Prefix     *     * @param array $a     * @param string $i     * @return array     */    function array_addprefix(&$a, $i) {        if(!$a || !$i)            return;        foreach ($a as &$e)            $e = $i . $e;        return $a;    }    /*     * Remove prefix     *     * Remove prifix from array values     *     * @param array $a     * @param string $i     *     * @return array     */    function array_removeprefix(&$a, $i) {        if(!$a || !$i)            return;        foreach ($a as &$e)            $e = str_replace($i, '', $e);        return $a;    }    /*     * Read XML     *     * Read the XML file used to store excluded tables     *     * @return array     */    function readXML() {        $xmlfile   = plugin_dir_path(__FILE__) . "xml/note.xml";        $xmlparser = xml_parser_create();        // open a file and read data        $fp        = fopen($xmlfile, 'r');        $xmldata   = fread($fp, 4096);        xml_parse_into_struct($xmlparser, $xmldata, $values);        xml_parser_free($xmlparser);        $ret = array();        foreach($values as $value):            if($value['tag'] == 'TABLE'):                array_push($ret, $value['value']);            endif;        endforeach;        $this->array_addprefix($ret, $this->db->prefix);        return $ret;    }    /*     * Edit XML file     *     * @param array $a     *     * @return void     */    function editXML($a) {        if(!$a)            return;        $myfile = fopen(plugin_dir_path(__FILE__) . "xml/note.xml", "w");        $input = '<?xml version="1.0" encoding="UTF-8"?>                    <db>';        $this->array_removeprefix($a['rd_chk'], $this->db->prefix);        foreach($a['rd_chk'] as $b):            // Get secured data to be stored            $input .= "<table>".$this->secure($b)."</table>";        endforeach;        $input .= '</db>';        fwrite($myfile, $input);        fclose($myfile);        ?>        <script> location.reload(); </script> <?php    }    /*     * Validate post incoming values     *     * @param Object $post     *     * @return bool     */    private function validatetoXML($post) {        if(!$post)            return;        foreach ($post[0] as $table):            // Validate if incoming table name is WordPress table from same instalation            if((strpos($table, $this->db->prefix)) === false) {                return false;            }            // Validate if incoming table name is from reject list            if((in_array($table, $this->table_list))) {                return false;            }            // Validate if incoming table name is part of identified WordPress instalation            if(!(in_array($table, $this->all_table_list))) {                return false;            }        endforeach;        // if all criteria meet, condition holds true        return true;    }// End of class read_DB}